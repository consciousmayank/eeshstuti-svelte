// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model PrayerType {
  id    Int     @id @default(autoincrement())
  name  String  @unique
}

model Deity {
  id        String          @id @default(uuid())
  name      String
  description String?
  imageName String?
  prayers   Prayer[]
  stories   Story[]
  images    Image[]
  occasions OccasionDeity[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model Prayer {
  id          String           @id @default(uuid())
  name        String
  content     String           @db.Text
  type        String
  translation String?          @db.Text
  audioUrl    String?
  deityId     String
  deity       Deity            @relation(fields: [deityId], references: [id])
  occasions   OccasionPrayer[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Story {
  id        String   @id @default(uuid())
  title     String
  content   String   @db.Text
  deityId   String
  deity     Deity    @relation(fields: [deityId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id          String   @id @default(uuid())
  url         String
  altText     String?
  shoutOut    String?
  deityId     String
  deity       Deity    @relation(fields: [deityId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Occasion {
  id          String           @id @default(uuid())
  name        String
  description String?          @db.Text
  story       String?          @db.Text
  date        String?
  deities     OccasionDeity[]
  prayers     OccasionPrayer[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

// Junction table for many-to-many relationship between Occasion and Deity
model OccasionDeity {
  id         String   @id @default(uuid())
  occasionId String
  deityId    String
  occasion   Occasion @relation(fields: [occasionId], references: [id])
  deity      Deity    @relation(fields: [deityId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([occasionId, deityId])
}

// Junction table for many-to-many relationship between Occasion and Prayer
model OccasionPrayer {
  id         String   @id @default(uuid())
  occasionId String
  prayerId   String
  occasion   Occasion @relation(fields: [occasionId], references: [id])
  prayer     Prayer   @relation(fields: [prayerId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([occasionId, prayerId])
}
